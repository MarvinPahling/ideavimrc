" basic stuff
set hlsearch
set scrolloff=5
set ignorecase smartcase
set showmode
set history=1000
set incsearch
set clipboard+=unnamed
set relativenumber
set ReplaceWithRegister
set visualbell
set idearefactormode=visual
set showcmd
set showmode
set virtualedit=onemore
set relativenumber number

" extensions
set surround
set multiple-cursors
set highlightedyank
set NERDTree
set argtextobj
set sneak
set quickscope
set switch
set peekaboo
set functiontextobj
set commentary

" set the various handlers
sethandler <C-a> a:vim
sethandler <C-b> a:vim
sethandler <C-c> a:vim
sethandler <C-d> a:vim
sethandler <C-e> a:vim
sethandler <C-f> a:vim
sethandler <C-g> a:vim
sethandler <C-h> a:vim
sethandler <C-i> a:vim
sethandler <C-j> a:ide
sethandler <C-k> a:ide
sethandler <C-l> a:vim
sethandler <C-m> a:vim
sethandler <C-n> a:vim
sethandler <C-o> a:vim
sethandler <C-p> a:vim
sethandler <C-q> a:vim
sethandler <C-r> a:vim
sethandler <C-s> a:vim
sethandler <C-t> a:vim
sethandler <C-u> a:vim
sethandler <C-v> a:vim
sethandler <C-v> a:vim
sethandler <C-w> a:vim
sethandler <C-x> a:vim
sethandler <C-y> a:vim
sethandler <C-z> a:vim

" register leader
let mapleader = " "

" WhichKey configuration (plugin is toggled by <leader>8)
let g:WhichKey_FontSize = 12
let g:WhichKey_PrefixColor = "#a403fe"
let g:WhichKey_CommandColor = "#01ffff"
let g:WhichKey_PrefixStyle = "bold"
let g:WhichKey_KeyStyle = "italic"
let g:WhichKey_SortOrder = "by_key_prefix_first"
let g:WhichKey_ShowTypedSequence = "true"
set which-key
set notimeout



" After block yank and paste, move cursor to the end of operated text and don't override register
vnoremap p "_dP`]
nnoremap p p`]

" Center screen after screen movement
nnoremap H Hzz
nnoremap M Mzz
nnoremap L Lzz

" Y yank whole line by default
vnoremap y ygv<Esc>$
nnoremap Y y$

" Yank and paste from clipboard
nnoremap ,y "+y
vnoremap ,y "+y
nnoremap ,yy "+yy
nnoremap ,p "+p

" have x (removes single character) not go into the default registry
nnoremap x "_x
" Make X an operator that removes without placing text in the default registry
nmap X "_d
nmap XX "_dd
vmap X "_d
vmap x "_d

" don't yank to default register when changing something
nnoremap c "xc
xnoremap c "xc

" Change line, better use S for this.
nmap cc 1S

" Copy Word
nmap ,c yiw

" Select word
nmap ,v viw

" Reselect last-pasted text
nnoremap gp `[v`]

" Center screen when jumping to next match
nnoremap n nzz
nnoremap N Nzz
vnoremap n nzz
vnoremap N Nzz

" Center screen when moving up and down
nnoremap <C-u> <C-u>zz
nnoremap <C-o> <C-d>zz
vnoremap <C-u> <C-u>zz
vnoremap <C-o> <C-d>zz

" easy window navigation
:map [[ <Action>(MethodUp)
:map ]] <Action>(MethodDown)
:map <a-k> gT
:map <a-j> gt
:map <Tab> <Action>(NextTab)
:map <S-Tab> <Action>(PreviousTab)

" clear the search buffer when hitting return
nnoremap <leader>sx :nohlsearch<cr>

" bookmarks
nmap <leader>bs <Action>(ShowBookmarks)
nmap <leader>bt <Action>(ActivateBookmarksToolWindow)
nmap <leader>bb <Action>(ToggleBookmark)
nmap <leader>be <Action>(EditBookmark)
nmap <leader>bp <Action>(GotoPreviousBookmark)
nmap <leader>bn <Action>(GotoNextBookmark)
let g:WhichKeyDesc_bookmarks = "<leader>b Bookmarks"
let g:WhichKeyDesc_bookmarks_show = "<leader>bs Show Bookmarks"
let g:WhichKeyDesc_bookmarks_tool = "<leader>bt Bookmark Tool"
let g:WhichKeyDesc_bookmarks_toggle_bookmark = "<leader>bb Toggle Bookmark"
let g:WhichKeyDesc_bookmarks_edit = "<leader>be Edit Bookmark"
let g:WhichKeyDesc_bookmarks_prev = "<leader>bp Previous Bookmark"
let g:WhichKeyDesc_bookmarks_next = "<leader>bn Next Bookmark"

" various functionality
:map <leader>hu <Action>(HighlightUsagesInFile)
:map <leader>o <Action>(FileStructurePopup)
:map <leader>so <Action>(SelectAllOccurrences)
let g:WhichKeyDesc_highlight_usages_in_file = "<leader>hu Highlight usages in file"
let g:WhichKeyDesc_file_structure_popup = "<leader>o File structure popup"
let g:WhichKeyDesc_select_all_occurrences = "<leader>so Select all occurrences"

xnoremap < <gv
xnoremap > >gv

" code navigation
:map <leader>j <Action>(MethodDown)
:map <leader>J <Action>(MethodUp)

:map g[ <Action>(GotoNextError)
let g:WhichKeyDesc_goto_next_error = "g[ Goto next error"

:map g] <Action>(GotoPreviousError)
let g:WhichKeyDesc_goto_previous_error = "g] Goto previous error"

:map <leader>ff <Action>(GotoFile)
let g:WhichKeyDesc_find_file = "<leader>ff Find File"

:map <leader>fs <Action>(SearchEverywhere)
let g:WhichKeyDesc_find_string = "<leader>fs Find String"

:map <leader>gi <Action>(GotoImplementation)
let g:WhichKeyDesc_goto_implementation = "<leader>gi Goto Implementation"

:map <leader>gd <Action>(GotoDeclaration)
let g:WhichKeyDesc_goto_declaration = "<leader>gd Goto Declaration"

:map <leader>gD <Action>(GotoDeclarationOnly)
let g:WhichKeyDesc_goto_declaration_only = "<leader>gD Goto Declaration only"

:map <leader>gc <Action>(GotoClass)
let g:WhichKeyDesc_goto_class = "<leader>gc Goto Class"

:map <leader>gtd <Action>(GotoTypeDeclaration)
let g:WhichKeyDesc_goto_type_declaration = "<leader>gtd Goto Type Declaration"

:map <leader>gu <Action>(ShowUsages)
let g:WhichKeyDesc_goto_usages = "<leader>gu Goto Usages"

:map <leader>lr <Action>(RenameElement)
let g:WhichKeyDesc_rename_element = "<leader>lr LSP rename"

:map <leader>sw <Action>(SurroundWith)
let g:WhichKeyDesc_surround_with = "<leader>sw Surround with"

:map <leader>loi <Action>(OptimizeImports)
let g:WhichKeyDesc_optimize_imports = "<leader>loi LSP Optimize Import"

:map <leader>zz <Action>(ToggleZenMode)
let g:WhichKeyDesc_toggle_zen_mode = "<leader>zz Toggle ZenMode"

:map <leader>zc <Action>(ToggleCompactMode)
let g:WhichKeyDesc_toggle_compact_mode = "<leader>zc Toggle Compact Mode"

:map <leader>zd <Action>(ToggleDistractionFreeMode)
let g:WhichKeyDesc_toggle_distraction_free_mode = "<leader>zd Toggle Distraction Free Mode"

:map <leader>zf <Action>(ToggleFullScreen)
let g:WhichKeyDesc_toggle_fullscreen = "<leader>zf Toggle Fullscreen"

:map <leader>zp <Action>(TogglePresentationMode)
let g:WhichKeyDesc_toggle_presentation_mode = "<leader>zp Toggle Presentation Mode"

:map <leader>lqi <Action>(QuickImplementations)
let g:WhichKeyDesc_quick_implementations = "<leader>lqi LSP Quick Implementation"

:map <leader>lqf <Action>(QuickFixes)
let g:WhichKeyDesc_quick_fixes = "<leader>lqf LSP Quick Fixes"

map <leader>hh <Action>(ShowHarpoon)
let g:WhichKeyDesc_harpoon_show = "<leader>hh Harpoon Show"

map <leader>ha <Action>(AddToHarpoon)
let g:WhichKeyDesc_harpoon_add = "<leader>ha Harpoon Add"

map <leader>hp <Action>(PreviousHarpoonItem)
let g:WhichKeyDesc_harpoon_prev = "<leader>hp Harpoon Prev"

map <leader>hn <Action>(NextHarpoonItem)
let g:WhichKeyDesc_harpoon_next = "<leader>hn Harpoon Next"

"ToggleCompletionHintsAction
"ToggleInlayHintsGloballyAction
"ToggleInlineHintsAction
"ToggleLineBreakpoint                             
"ToggleMethodBreakpoint
"ToggleReadOnlyAttribute
"ToggleRenderedDocPresentationForAll

:map <S-k> <Action>(ShowErrorDescription)
:map <S-l> <Action>(ShowHoverInfo)
:map <S-p> <Action>(ShowPopupMenu)
:map <S-j> <Action>(QuickJavaDoc)

" splits
:map <Leader>sv <Action>(SplitVertically)
:map <Leader>sx <Action>(Unsplit)
:map <c-h> <Action>(PrevSplitter)
:map <c-l> <Action>(NextSplitter)

" built-in navigation to navigated items works better
:nmap <c-o> <Action>(Back)
:nmap <c-i> <Action>(Forward)

" but preserve ideavim defaults
:map g<c-o> <c-o>
:map g<c-i> <c-i>

" close stuff
:map <leader>q <Action>(CloseEditor)
:map <leader>Q <Action>(CloseAllEditors)
:map <leader>w <Action>(CloseAllEditorsButActive)

" run stuff
:map <leader>cg <Action>(ChooseRunConfiguration)
let g:WhichKeyDesc_choose_run_configuration = "<leader>cg Choose run configuration"
:map <leader>dg <Action>(ChooseDebugConfiguration)
let g:WhichKeyDesc_choose_debug_configuration = "<leader>dg Choose debug configuration"
:map <leader>rr <Action>(Run)
let g:WhichKeyDesc_run = "<leader>rr Run"
:map <leader>rd <Action>(Debug)
let g:WhichKeyDesc_debug = "<leader>rd Run Debug"
:map <leader>rs <Action>(Stop)
let g:WhichKeyDesc_stop = "<leader>rs Run Stop"

" other things
:map <leader>ns <Action>(NewScratchFile)
:map <leader>an <Action>(Annotate)
:map <leader>tw <Action>(ActivateProjectToolWindow)
nnoremap <leader>rb :s /<<<<<<<\\|=======\\|>>>>>>><CR>
let g:WhichKeyDesc_new_scratch_file = "<leader>ns New scratch file"
let g:WhichKeyDesc_annotate = "<leader>an Annotate"
let g:WhichKeyDesc_activate_project_window = "<leader>tw Activate project tool window"

" source
:map <leader>9 :source ~/.ideavimrc<CR>
let g:WhichKeyDesc_reload_vim_rc = "<leader>9 Reload VimRc"

nmap <C-n> <Plug>NextWholeOccurrence
xmap <C-n> <Plug>NextWholeOccurrence
nmap g<C-n> <Plug>NextOccurrence
xmap g<C-n> <Plug>NextOccurrence
xmap <C-x> <Plug>SkipOccurrence
xmap <C-p> <Plug>RemoveOccurrence
